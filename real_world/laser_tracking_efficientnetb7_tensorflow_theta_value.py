# -*- coding: utf-8 -*-
"""Laser_tracking_EfficientNetB7_tensorflow_Theta_value.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A6hi1FvYiXcaS9uksSjAqpueT3d_Xob0
"""

####importing all the libraries#######
import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D 
from tensorflow.keras import datasets, layers, models
from tensorflow.python.keras.applications.efficientnet import EfficientNetB7
import os
import cv2
import re
import numpy as np
import tensorboard
import csv

#########Data processing############################################
directory = r'/content/drive/MyDrive/CSE_598_initial_labelled_laser_data/'
Labels_file= '/content/drive/MyDrive/Image_data_set/labels.csv'
training_data1=[]
testing_data1=[]
with open(Labels_file) as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    next(csv_file)
    count=0
    for row in csv_reader:
       count=count+1
       if(row[4].strip()=='1'):
        if(count<=840):
          im = cv2.imread(os.path.join(directory,row[0].strip()))
          size=(50,50)
          im2=tf.image.resize(im, size, method='bilinear')
          im2=im2/255
          print(im2)
          theta=float(row[2].strip())
          if(theta<-1):
            theta=theta+360
          elif(theta<=0 and theta>=-1):
            theta=0
          elif(theta>=90 and theta<=96):
            theta=90
          theta=theta/180
          distance=float(row[3].strip())
          distance=distance/80
       #laser=float(row[4].strip())
          training_data1.append([im2,theta])
        if(count==840):
          im = cv2.imread(os.path.join(directory,row[0].strip()))
          theta=float(row[2].strip())
          if(theta<-10):
            theta=theta+360
          elif(theta<=0 and theta>=-10):
            theta=0
          elif(theta>=90 and theta<=100):
            theta=90
          theta=theta/180
          distance=float(row[3].strip())
          distance=distance/80
       #laser=float(row[4].strip())
          testing_data1.append([im2,theta])
          break
    csv_file.close()
print(len(training_data1))
print(im.shape)

X=[]
Y1=[]
#Y2=[]
for i in range(0,len(training_data1)):
    X.append(training_data1[i][0])
    Y1.append([training_data1[i][1]])

X_test=[]
Y1_test=[]

X_test.append(testing_data1[0][0])
Y1_test.append([testing_data1[0][1]])


X=np.array(X)
Y1=np.array(Y1)
print(Y1)

EfficientNetB7_POOLING_AVERAGE = 'avg'
WEIGHTS_IMG='imagenet'
model = Sequential()

model.add(EfficientNetB7(include_top = False, pooling = EfficientNetB7_POOLING_AVERAGE , weights='imagenet'))
model.add(layers.Dense(2, activation = 'relu'))
model.add(layers.Dense(1, activation = 'linear'))
model.layers[0].trainable = False
model.summary()

model.compile(loss='mse',
              optimizer='adam'
,
              metrics=['accuracy'])

model.fit(X,Y1,batch_size=5,epochs=20)

y1_pred=model(X_test)
print(y1_pred)
print(Y1_test)